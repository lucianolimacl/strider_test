// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Strider.Infra;

#nullable disable

namespace Strider.WebApi.Migrations
{
    [DbContext(typeof(StriderDbContext))]
    partial class StriderDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Strider.Domain.Models.PostModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(777)
                        .HasColumnType("nvarchar(777)");

                    b.Property<int>("PostType")
                        .HasColumnType("int");

                    b.Property<int?>("QuotePostId")
                        .HasColumnType("int");

                    b.Property<int?>("RepostPostId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuotePostId");

                    b.HasIndex("RepostPostId");

                    b.HasIndex("UserId");

                    b.ToTable("Post", (string)null);
                });

            modelBuilder.Entity("Strider.Domain.Models.UserFollowModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("FollowingUserId")
                        .HasColumnType("int");

                    b.Property<int>("UserFollowedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FollowingUserId");

                    b.HasIndex("UserFollowedId", "FollowingUserId")
                        .IsUnique();

                    b.ToTable("UserFollow", (string)null);
                });

            modelBuilder.Entity("Strider.Domain.Models.UserModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateJoined")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.HasKey("Id");

                    b.ToTable("UserProfile", (string)null);
                });

            modelBuilder.Entity("Strider.Domain.Models.PostModel", b =>
                {
                    b.HasOne("Strider.Domain.Models.PostModel", "QuotePost")
                        .WithMany()
                        .HasForeignKey("QuotePostId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Strider.Domain.Models.PostModel", "Repost")
                        .WithMany()
                        .HasForeignKey("RepostPostId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Strider.Domain.Models.UserModel", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuotePost");

                    b.Navigation("Repost");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Strider.Domain.Models.UserFollowModel", b =>
                {
                    b.HasOne("Strider.Domain.Models.UserModel", "FollowingUser")
                        .WithMany("Following")
                        .HasForeignKey("FollowingUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Strider.Domain.Models.UserModel", "UserFollowed")
                        .WithMany("Followers")
                        .HasForeignKey("UserFollowedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FollowingUser");

                    b.Navigation("UserFollowed");
                });

            modelBuilder.Entity("Strider.Domain.Models.UserModel", b =>
                {
                    b.Navigation("Followers");

                    b.Navigation("Following");

                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
